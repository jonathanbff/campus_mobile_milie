import streamlit as st
import os
from groq import Groq
from dotenv import load_dotenv
from streamlit_mic_recorder import mic_recorder
import io
from streamlit.components.v1 import html
from reportlab.lib import colors
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.enums import TA_JUSTIFY, TA_CENTER
import tempfile
from datetime import datetime
import tomli  # Add this import for reading TOML files

def load_project_config():
    """Load project configuration from pyproject.toml"""
    try:
        with open("pyproject.toml", "rb") as f:
            return tomli.load(f)
    except Exception as e:
        st.error(f"Error loading project configuration: {str(e)}")
        return None

# Load project configuration
project_config = load_project_config()
if project_config:
    st.sidebar.text(f"Version: {project_config['project']['version']}")
    st.sidebar.text(f"App: {project_config['project']['name']}")

# Carrega as vari√°veis de ambiente
load_dotenv()

# Configura√ß√µes iniciais da p√°gina
st.set_page_config(
    page_title="Milie Mind Bot üß†",
    page_icon="üß†",
    layout="centered",
    initial_sidebar_state="collapsed"
)

# Detecta o tema atual
def get_theme():
    # Injeta JavaScript para detectar o tema
    js_code = """
        <script>
            const theme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
            document.documentElement.setAttribute('data-theme', theme);
        </script>
    """
    html(js_code, height=0)
    return 'dark' if st.get_option("theme.base") == "dark" else 'light'

# T√≠tulo e descri√ß√£o
st.title("Milie Mind Bot üß†")
st.markdown("### Acompanhamento de Consultas para Crian√ßas no Espectro Autista")
st.markdown("---")

# CSS personalizado com suporte a temas
st.markdown("""
    <style>
    :root[data-theme="light"] {
        --bg-color: #ffffff;
        --text-color: #333333;
        --primary-color: #9d4edd;
        --secondary-color: #bb86fc;
        --card-bg: #f8f9fa;
        --card-border: #e9ecef;
    }
    
    :root[data-theme="dark"] {
        --bg-color: #121212;
        --text-color: #e0e0e0;
        --primary-color: #bb86fc;
        --secondary-color: #9d4edd;
        --card-bg: #2c2c2c;
        --card-border: #bb86fc;
    }
    
    body {
        background-color: var(--bg-color);
        color: var(--text-color);
    }
    
    .main {
        background-color: var(--bg-color);
        padding: 20px;
        border-radius: 10px;
    }
    
    h1, h2, h3 {
        color: var(--text-color);
        font-weight: 600;
        margin-top: 1.5em;
    }
    
    .stButton>button {
        background-color: var(--primary-color);
        color: var(--bg-color);
        border-radius: 5px;
        padding: 10px 20px;
        font-size: 16px;
        transition: all 0.3s ease;
    }
    
    .stButton>button:hover {
        background-color: var(--secondary-color);
        transform: translateY(-2px);
    }
    
    .analysis-box {
        border: 2px solid var(--primary-color);
        padding: 20px;
        border-radius: 15px;
        background-color: var(--card-bg);
        margin: 20px 0;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }
    
    .metric-card {
        background: linear-gradient(145deg, var(--card-bg), var(--bg-color));
        border-radius: 10px;
        padding: 15px;
        margin: 10px 0;
        border-left: 4px solid var(--primary-color);
    }
    
    .encouragement {
        color: var(--primary-color);
        font-size: 1.3em;
        font-weight: bold;
        text-align: center;
        padding: 20px;
        background: linear-gradient(145deg, var(--card-bg), var(--bg-color));
        border-radius: 10px;
        margin: 20px 0;
        animation: glow 2s ease-in-out infinite;
    }
    
    @keyframes glow {
        0% { box-shadow: 0 0 5px var(--primary-color); }
        50% { box-shadow: 0 0 20px var(--primary-color); }
        100% { box-shadow: 0 0 5px var(--primary-color); }
    }
    
    .emotion-tag {
        display: inline-block;
        padding: 5px 10px;
        margin: 5px;
        border-radius: 15px;
        background-color: var(--primary-color);
        color: var(--bg-color);
    }
    
    .medical-report {
        font-family: 'Courier New', monospace;
        background-color: var(--card-bg);
        padding: 20px;
        border-radius: 10px;
        border: 1px solid var(--card-border);
    }
    
    .stDownloadButton>button {
        background-color: var(--primary-color);
        color: var(--bg-color);
        border-radius: 5px;
        padding: 10px 20px;
        font-size: 16px;
        transition: all 0.3s ease;
        width: 100%;
        margin-top: 10px;
    }
    
    .stDownloadButton>button:hover {
        background-color: var(--secondary-color);
        transform: translateY(-2px);
    }
    </style>
""", unsafe_allow_html=True)

# Inicializa o cliente Groq
client_groq = Groq(api_key=os.getenv("GROQ_API_KEY") or st.secrets.get("GROQ_API_KEY"))

# Fun√ß√£o para transcrever o √°udio
def transcrever_audio(audio_path):
    with open(audio_path, "rb") as audio_file:
        transcription = client_groq.audio.transcriptions.create(
            file=(audio_path, audio_file.read()),
            model="whisper-large-v3-turbo",
            prompt="Por favor, transcreva o √°udio com clareza e precis√£o.",
            response_format="json",
            language="pt",
            temperature=0.0
        )
    return transcription.text

# Fun√ß√£o para analisar o texto utilizando prompt engineering avan√ßado
def analisar_texto(texto):
    # Prompt para an√°lise familiar
    family_prompt = (
        "Voc√™ √© uma especialista em psicologia infantil e neuroci√™ncia, com foco em TEA. "
        "Analise o relato de forma acolhedora e emp√°tica, focando em:\n\n"
        "1. üí≠ **An√°lise Emocional:**\n"
        "   - Emo√ß√µes identificadas (com emojis)\n"
        "   - Intensidade das emo√ß√µes (1-10)\n"
        "   - Tom geral da comunica√ß√£o\n\n"
        "2. üåü **Pontos Positivos:**\n"
        "   - Progressos observados\n"
        "   - Habilidades demonstradas\n\n"
        "3. üéØ **Sugest√µes Pr√°ticas:**\n"
        "   - Atividades para casa\n"
        "   - Dicas de intera√ß√£o\n"
        "Use linguagem acess√≠vel e mantenha tom positivo e encorajador."
    )
    
    # Prompt para relat√≥rio m√©dico
    medical_prompt = (
        "Voc√™ √© um especialista em neuropsiquiatria infantil com foco em TEA. "
        "Elabore um relat√≥rio t√©cnico detalhado considerando:\n\n"
        "1. **Avalia√ß√£o Cl√≠nica:**\n"
        "   - Padr√µes de comunica√ß√£o verbal/n√£o-verbal\n"
        "   - Indicadores comportamentais do TEA\n"
        "   - Fun√ß√µes executivas e cognitivas\n\n"
        "2. **An√°lise Sensorial:**\n"
        "   - Processamento sensorial\n"
        "   - Respostas a est√≠mulos\n"
        "   - Padr√µes de autorregula√ß√£o\n\n"
        "3. **M√©tricas Quantitativas:**\n"
        "   - Escalas padronizadas quando aplic√°vel\n"
        "   - Comparativo com linha base\n"
        "Use terminologia t√©cnica apropriada e formate em estilo de relat√≥rio m√©dico."
    )
    
    # Realiza as duas an√°lises
    family_response = client_groq.chat.completions.create(
        model="mixtral-8x7b-32768",
        messages=[
            {"role": "system", "content": family_prompt},
            {"role": "user", "content": texto}
        ],
        temperature=0.4,
        max_tokens=1024
    )
    
    medical_response = client_groq.chat.completions.create(
        model="mixtral-8x7b-32768",
        messages=[
            {"role": "system", "content": medical_prompt},
            {"role": "user", "content": texto}
        ],
        temperature=0.2,
        max_tokens=2048
    )
    
    return {
        "family": family_response.choices[0].message.content,
        "medical": medical_response.choices[0].message.content
    }

# Fun√ß√£o para criar visualiza√ß√µes de dados
def criar_visualizacoes(analise):
    import plotly.graph_objects as go
    import re
    
    # Extrai valores num√©ricos da an√°lise (exemplo)
    # Isso depender√° do formato da resposta do modelo
    emocoes = {
        'Alegria': 0,
        'Ansiedade': 0,
        'Frustra√ß√£o': 0,
        'Interesse': 0,
        'Calma': 0
    }
    
    # Atualiza o dicion√°rio baseado na an√°lise
    for emocao in emocoes.keys():
        if emocao.lower() in analise.lower():
            # Procura por n√∫meros pr√≥ximos √† emo√ß√£o
            match = re.search(f"{emocao.lower()}.*?(\d+)", analise.lower())
            if match:
                emocoes[emocao] = int(match.group(1))
    
    # Cria gr√°fico de radar
    fig = go.Figure(data=go.Scatterpolar(
        r=list(emocoes.values()),
        theta=list(emocoes.keys()),
        fill='toself',
        line_color='#bb86fc'
    ))
    
    fig.update_layout(
        polar=dict(
            radialaxis=dict(
                visible=True,
                range=[0, 10]
            )
        ),
        showlegend=False,
        paper_bgcolor='rgba(0,0,0,0)',
        plot_bgcolor='rgba(0,0,0,0)',
        font=dict(color='#e0e0e0')
    )
    
    return fig

# Fun√ß√£o para processar o √°udio (salva em um arquivo tempor√°rio)
def process_audio(audio_data, file_extension=".wav"):
    if audio_data is not None:
        # Caso o formato seja dict (formato do mic_recorder)
        if isinstance(audio_data, dict):
            if 'bytes' not in audio_data:
                return None
            audio_bytes = audio_data['bytes']
        else:
            audio_bytes = audio_data

        audio_path = f"temp_audio{file_extension}"
        with open(audio_path, "wb") as f:
            f.write(audio_bytes)
        
        try:
            # Exibe o player de √°udio
            st.audio(audio_bytes, format=f"audio/{file_extension[1:]}")
            return audio_path
        except Exception as e:
            st.error(f"Ocorreu um erro ao processar o √°udio: {str(e)}")
            if os.path.exists(audio_path):
                os.remove(audio_path)
            return None

# Interface de entrada de √°udio
st.markdown("### üéôÔ∏è Escolha como fornecer o √°udio")

# Cria abas para grava√ß√£o e upload
tab1, tab2 = st.tabs(["Gravar √Åudio", "Fazer Upload"])

# Inicializa o estado da sess√£o para armazenar o caminho do √°udio
if 'audio_path' not in st.session_state:
    st.session_state.audio_path = None

with tab1:
    st.markdown("Clique no bot√£o abaixo para come√ßar a gravar")
    # Utiliza o mic_recorder para gravar √°udio
    audio_bytes = mic_recorder(
        key="recorder",
        start_prompt="Clique para Gravar",
        stop_prompt="Parar Grava√ß√£o",
        just_once=True
    )
    if audio_bytes:
        st.success("√Åudio gravado com sucesso!")
        st.session_state.audio_path = process_audio(audio_bytes)

with tab2:
    st.markdown("Voc√™ pode fazer upload de um arquivo de √°udio gravado anteriormente.")
    uploaded_file = st.file_uploader("Escolha um arquivo de √°udio", type=['wav', 'mp3', 'm4a'])
    if uploaded_file is not None:
        st.session_state.audio_path = process_audio(
            uploaded_file.getvalue(),
            file_extension="." + uploaded_file.name.split('.')[-1]
        )

# Bot√£o para processar a an√°lise
if st.session_state.audio_path:
    if st.button("Processar An√°lise", key="analyze_button"):
        with st.spinner("Processando transcri√ß√£o e an√°lise..."):
            try:
                transcricao = transcrever_audio(st.session_state.audio_path)
                analises = analisar_texto(transcricao)
                
                st.markdown("---")
                st.markdown("## üìä Resultados da An√°lise")
                
                # Mensagem de encorajamento animada
                st.markdown('<div class="encouragement">‚ú® An√°lise Conclu√≠da com Sucesso! ‚ú®</div>', unsafe_allow_html=True)
                
                # Exibe a transcri√ß√£o
                with st.expander("üìù Transcri√ß√£o do √Åudio", expanded=True):
                    st.markdown('<div class="analysis-box">{}</div>'.format(transcricao), unsafe_allow_html=True)
                
                # Cria tabs para diferentes vis√µes
                tab_familia, tab_medico = st.tabs(["üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Vis√£o para Fam√≠lia", "üë®‚Äç‚öïÔ∏è Relat√≥rio M√©dico"])
                
                with tab_familia:
                    st.markdown('<div class="analysis-box">{}</div>'.format(analises["family"]), unsafe_allow_html=True)
                    fig = criar_visualizacoes(analises["family"])
                    st.plotly_chart(fig, use_container_width=True)
                
                with tab_medico:
                    st.markdown('<div class="medical-report">{}</div>'.format(analises["medical"]), unsafe_allow_html=True)
                    
                    # Bot√£o para download do relat√≥rio
                    if st.button("üì• Baixar Relat√≥rio M√©dico (PDF)"):
                        try:
                            with st.spinner("Gerando PDF..."):
                                # Cria o PDF
                                pdf_path = criar_relatorio_pdf(transcricao, analises["medical"])
                                
                                # L√™ o arquivo PDF
                                with open(pdf_path, "rb") as pdf_file:
                                    pdf_bytes = pdf_file.read()
                                
                                # Oferece o download
                                st.download_button(
                                    label="üìÑ Clique para baixar o relat√≥rio",
                                    data=pdf_bytes,
                                    file_name=f"relatorio_medico_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf",
                                    mime="application/pdf"
                                )
                                
                                # Remove o arquivo tempor√°rio
                                os.remove(pdf_path)
                                
                        except Exception as e:
                            st.error(f"Erro ao gerar o PDF: {str(e)}")
                
            except Exception as e:
                st.error(f"Ocorreu um erro ao processar o √°udio: {str(e)}")
            finally:
                if os.path.exists(st.session_state.audio_path):
                    os.remove(st.session_state.audio_path)
                st.session_state.audio_path = None

# Instru√ß√µes de uso
st.markdown("---")
st.markdown("""
### Como usar:
1. Grave um √°udio utilizando o gravador acima ou fa√ßa o upload de um arquivo existente.
2. Clique no bot√£o 'Processar An√°lise' para obter a transcri√ß√£o e a an√°lise do relato.
3. Visualize os resultados organizados em se√ß√µes para facilitar a interpreta√ß√£o.
""")

# Adicione esta nova fun√ß√£o para criar o PDF
def criar_relatorio_pdf(transcricao, analise_medica):
    # Cria um arquivo tempor√°rio para o PDF
    with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as tmp_file:
        pdf_path = tmp_file.name
        
        # Configura√ß√£o do documento
        doc = SimpleDocTemplate(
            pdf_path,
            pagesize=letter,
            rightMargin=72,
            leftMargin=72,
            topMargin=72,
            bottomMargin=72
        )
        
        # Estilos
        styles = getSampleStyleSheet()
        styles.add(ParagraphStyle(
            name='Justify',
            alignment=TA_JUSTIFY,
            fontSize=11,
            leading=14
        ))
        
        styles.add(ParagraphStyle(
            name='Header',
            alignment=TA_CENTER,
            fontSize=16,
            leading=20,
            spaceAfter=30
        ))
        
        # Conte√∫do do documento
        content = []
        
        # Cabe√ßalho
        header = Paragraph(
            "Relat√≥rio de Avalia√ß√£o Neuropsiqui√°trica",
            styles['Header']
        )
        content.append(header)
        
        # Data
        data_atual = datetime.now().strftime("%d/%m/%Y")
        data = Paragraph(
            f"Data: {data_atual}",
            styles['Normal']
        )
        content.append(data)
        content.append(Spacer(1, 12))
        
        # Transcri√ß√£o
        content.append(Paragraph("Transcri√ß√£o do √Åudio:", styles['Heading2']))
        content.append(Spacer(1, 6))
        content.append(Paragraph(transcricao, styles['Justify']))
        content.append(Spacer(1, 12))
        
        # An√°lise M√©dica
        content.append(Paragraph("An√°lise T√©cnica:", styles['Heading2']))
        content.append(Spacer(1, 6))
        content.append(Paragraph(analise_medica, styles['Justify']))
        
        # Rodap√©
        content.append(Spacer(1, 30))
        footer = Paragraph(
            "Documento gerado automaticamente pelo Milie Mind Bot",
            styles['Normal']
        )
        content.append(footer)
        
        # Gera o PDF
        doc.build(content)
        
        return pdf_path
